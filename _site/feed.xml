<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding Hard</title>
    <description>Talk is cheap, show me the code
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 13 Apr 2016 00:14:35 +0800</pubDate>
    <lastBuildDate>Wed, 13 Apr 2016 00:14:35 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>C++仿函数</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;仿函数简单来说,就是重定义了成员函数operator()的一种自定义类型对象&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;	&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_functor&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;_functor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Tue, 12 Apr 2016 12:30:00 +0800</pubDate>
        <link>http://yourdomain.com/c++%E4%BB%BF%E5%87%BD%E6%95%B0/2016/04/12/C++%E4%BB%BF%E5%87%BD%E6%95%B0.html</link>
        <guid isPermaLink="true">http://yourdomain.com/c++%E4%BB%BF%E5%87%BD%E6%95%B0/2016/04/12/C++%E4%BB%BF%E5%87%BD%E6%95%B0.html</guid>
        
        
        <category>C++仿函数</category>
        
      </item>
    
      <item>
        <title>游戏中的活动</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;游戏中活动的一般做法&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;一般游戏中的活动有很多功能和属性是每一个活动都需要的
所以可以把这个功能和属性做成一个基类，然后所有的活动都继承这个基类的方法和属性。

所以我们先需要定义一个包含共有属性的结构体

然后在顶一个包含共有函数的类，并声明一个上述结构体的变量 
这个结构体变量的初始化在每一个继承该base类的之类加载配置的时候，初始化 (即调用该函数的时候 virtual int LoadPhpInfo(Json::Value &amp;amp; jsonStr) = 0;)	

活动类在继承该基类的时候，需要事先声明一下，然后在继承这个类

然后我们需要一个活动管理类来管理游戏中多有这种类型的活动 
我们需要把所有的活动类都插入到该child中来管理 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 31 Dec 2015 15:00:00 +0800</pubDate>
        <link>http://yourdomain.com/shell/2015/12/31/%E6%B8%B8%E6%88%8F%E4%B8%AD%E7%9A%84%E6%B4%BB%E5%8A%A8.html</link>
        <guid isPermaLink="true">http://yourdomain.com/shell/2015/12/31/%E6%B8%B8%E6%88%8F%E4%B8%AD%E7%9A%84%E6%B4%BB%E5%8A%A8.html</guid>
        
        
        <category>shell</category>
        
      </item>
    
      <item>
        <title>CppTemplateTourial学习</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;偶然在知乎看到大神写的这篇cpp template的文章，觉得受益匪浅，可惜作者尚未写完，很是期待。。。 这是我看文章的过程中，顺手摘抄作者所写的代码...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;文章链接：&lt;a href=&quot;https://github.com/wuye9036/CppTemplateTutorial&quot;&gt;https://github.com/wuye9036/CppTemplateTutorial&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;

template &amp;lt;typename T&amp;gt;
class TypeToID
{
public:
    static int const NotID = -1;
};

template &amp;lt;&amp;gt;
class TypeToID&amp;lt;float&amp;gt;
{
public:
    static int const ID = 1;
};

template &amp;lt;typename T&amp;gt;
class TypeToID&amp;lt;T*&amp;gt;
{
public:
    typedef T SameAsT;
    static int const ID = 0x80000000;
};

void PrintID()
{
    cout &amp;lt;&amp;lt; &quot;ID of float*:&quot; &amp;lt;&amp;lt; TypeToID&amp;lt; TypeToID&amp;lt;float*&amp;gt;::SameAsT &amp;gt;::ID &amp;lt;&amp;lt; endl;
}


template &amp;lt;typename T&amp;gt;
class RemovePointer
{

};

template &amp;lt;typename T&amp;gt;
class RemovePointer&amp;lt;T*&amp;gt;
{
public:
    typedef T Result;
};
void Foo()
{
    RemovePointer&amp;lt;float*&amp;gt;::Result x = 5.0f;
    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;
}

template &amp;lt;typename T&amp;gt;
struct X
{

};

template &amp;lt;typename T&amp;gt;
struct Y
{
    typedef X&amp;lt;T&amp;gt; reboundType;
    typedef typename X&amp;lt;T&amp;gt;::MemberType MemberType;
    //typedef UnknownType MemberType3;


    void foo()
    {
	X&amp;lt;T&amp;gt; instance0;
	typename X&amp;lt;T&amp;gt;::MemberType instance1;
	//WTF instance2;
	//大王叫我来巡山 - + &amp;amp;
    }
};


/*
// overload
void doWork( int );
void doWork(float);
void doWork(int, int);
void f ()
{
    doWork(0);
    doWork(0.5f);
    doWork(1,1);
}
*/

template &amp;lt;typename T&amp;gt; struct DoWork;  // (0) 这是原型
template &amp;lt;&amp;gt; struct DoWork&amp;lt;int&amp;gt; {}     // (1) 这是int类型的&quot;重载“&quot;
template &amp;lt;&amp;gt; struct DoWork&amp;lt;float&amp;gt; {};  // (2) 这是float类型的重载
template &amp;lt;&amp;gt; struct DoWork&amp;lt;int, int&amp;gt; {} // (3) 这是int int类型的重载

template &amp;lt;typename T0, typename T1 = void&amp;gt; struct X
{
    static void call(T0 const &amp;amp;p0, T1 const &amp;amp;p1)
    {
	std::cout &amp;lt;&amp;lt; &quot; X be called &quot; &amp;lt;&amp;lt; std::endl;
    }
}
template &amp;lt;typename T0&amp;gt; struct X&amp;lt;T0&amp;gt;
{
    static void call(T0 const &amp;amp;p0)
    {
	std::cout &amp;lt;&amp;lt; &quot;Y be called!&quot; &amp;lt;&amp;lt; std::endl;
    }
}


// Boost.Tuple
template &amp;lt;
    class T0 = null_type, class T1 = null_type, class T2 = null_type,
    class T3 = null_type, class T4 = null_type, class T5 = null_type,
    class T6 = null_type, class T7 = null_type, class T8 = null_type,
    class T9= null_type&amp;gt;
class tuple;
// Tuple的一些用例
tuple&amp;lt;int&amp;gt; a;
tuple&amp;lt;double&amp;amp;,const double&amp;amp;, const double, double*, const double*&amp;gt; b;
tuple&amp;lt;A, int(*)(char, int), B(A::*)(C&amp;amp;), C&amp;gt; c;
tuple&amp;lt;std::string, std::pair&amp;lt;A, B&amp;gt; &amp;gt; d;
tuple&amp;lt;A*, tuple&amp;lt;const A*, const B&amp;amp;, C&amp;gt; , bool, void *&amp;gt; e;

// C++11 变参模板(Variadic Template) 通常只能放在最后面
template &amp;lt;typename... Ts&amp;gt; class tuple;

int main()
{
    //PrintID();
    Foo();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 18 Dec 2015 15:38:00 +0800</pubDate>
        <link>http://yourdomain.com/c++/template/2015/12/18/CppTemplateTutorial.html</link>
        <guid isPermaLink="true">http://yourdomain.com/c++/template/2015/12/18/CppTemplateTutorial.html</guid>
        
        
        <category>C++</category>
        
        <category>template</category>
        
      </item>
    
      <item>
        <title>shell 循环</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;var &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;12 3 4 
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done

for &lt;/span&gt;file &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;ls ..&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;file: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;the number of the arguments is $#&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;argument
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$argument&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done

for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1;i&amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10; i++ &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; time&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; i &amp;lt; 10 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;i:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, sum:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sum&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sum+=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;i++&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done

while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;shift
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#result: &lt;/span&gt;
&amp;lt;img &lt;span class=&quot;nv&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/assets/2.png&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.png&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;img-center&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1544&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1244&quot;&lt;/span&gt;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 12 Dec 2015 12:30:00 +0800</pubDate>
        <link>http://yourdomain.com/shell/2015/12/12/shell_foreach.html</link>
        <guid isPermaLink="true">http://yourdomain.com/shell/2015/12/12/shell_foreach.html</guid>
        
        
        <category>shell</category>
        
      </item>
    
      <item>
        <title>Shell脚本编写函数</title>
        <description>&lt;p&gt;shell脚本函数命名规则:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;都由小写字母和下划线组成，并以字母开头&lt;/li&gt;
  &lt;li&gt;不要使用命令作为函数名称&lt;/li&gt;
  &lt;li&gt;不要在函数名中使用特殊字符&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;  
    	&lt;span class=&quot;cp&quot;&gt;#!/bin/bash
&lt;/span&gt;   		&lt;span class=&quot;cp&quot;&gt;# 等号两边不能有空格
&lt;/span&gt;    	&lt;span class=&quot;cp&quot;&gt;# 判断语句里面要有空格
&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        	&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    	&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;#调用函数&lt;/span&gt;

    	&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;filenum = 0&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dirnum = 0&quot;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dirnum += 1&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;filenum += 1&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fi&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;the number of file is $filenum&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;the number of dirnum is $dirnum&quot;&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    	&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;   &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;文件数&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;文件夹数&lt;/span&gt;

    	&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       	  	&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;#向函数传递参数&lt;/span&gt;

    	&lt;span class=&quot;n&quot;&gt;half&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         	&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;n = $1&quot;&lt;/span&gt;
         	&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;n /= 2&quot;&lt;/span&gt;
         	&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The half is $n&quot;&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    	&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;m = $1&quot;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Before half function m is $m&quot;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;half&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;                 &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;传递型参&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;After half function m is $m&quot;&lt;/span&gt;

    	&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;d=0&quot;&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnByVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         	&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    	&lt;span class=&quot;n&quot;&gt;returnByVar&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!(on function returnByVar)!&quot;&lt;/span&gt;

    	&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;

    	&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Global Var&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#全局变量&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         	&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Local Var!&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#局部变量&lt;/span&gt;
         	&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    	&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;out of function text=$text&quot;&lt;/span&gt;

    	&lt;span class=&quot;n&quot;&gt;fabnaci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        	&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c=$1&quot;&lt;/span&gt;
        	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;le&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;
             	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
       	 	&lt;span class=&quot;n&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;
            	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        	&lt;span class=&quot;n&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;
            	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
             	&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
             	&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;arg=$1-1&quot;&lt;/span&gt;
             	&lt;span class=&quot;n&quot;&gt;fabnaci&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;
             	&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ans+=$?&quot;&lt;/span&gt;
             	&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;arg=$1-2&quot;&lt;/span&gt;
             	&lt;span class=&quot;n&quot;&gt;fabnaci&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;
             	&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ans+=$?&quot;&lt;/span&gt;
             	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;
         	&lt;span class=&quot;n&quot;&gt;fi&lt;/span&gt;
    	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    	&lt;span class=&quot;n&quot;&gt;fabnaci&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;     &lt;span class=&quot;err&quot;&gt;#上次函数调用的返回值&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;result&quot;&gt;Result:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/shell-1.png&quot; alt=&quot;shell-1&quot; class=&quot;img-center&quot; width=&quot;1154&quot; height=&quot;522&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;参考：&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/mdx20072419/article/details/9381339&quot;&gt;http://blog.csdn.net/mdx20072419/article/details/9381339&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Dec 2015 23:45:00 +0800</pubDate>
        <link>http://yourdomain.com/shell/2015/12/10/shell-function.html</link>
        <guid isPermaLink="true">http://yourdomain.com/shell/2015/12/10/shell-function.html</guid>
        
        
        <category>shell</category>
        
      </item>
    
      <item>
        <title>Protobuf通信</title>
        <description>
</description>
        <pubDate>Tue, 08 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/12/08/Protobuf%E9%80%9A%E4%BF%A1.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/12/08/Protobuf%E9%80%9A%E4%BF%A1.html</guid>
        
        
      </item>
    
      <item>
        <title>C++读取xml</title>
        <description>
</description>
        <pubDate>Tue, 08 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/12/08/C++%E8%AF%BB%E5%8F%96Xml.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/12/08/C++%E8%AF%BB%E5%8F%96Xml.html</guid>
        
        
      </item>
    
      <item>
        <title>C++读取json</title>
        <description>
</description>
        <pubDate>Tue, 08 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/12/08/C++%E8%AF%BB%E5%8F%96Json.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/12/08/C++%E8%AF%BB%E5%8F%96Json.html</guid>
        
        
      </item>
    
      <item>
        <title>一些shell脚本</title>
        <description>&lt;h1 id=&quot;talk-is-cheap-show-me-the-code&quot;&gt;Talk is cheap, show me the code!&lt;/h1&gt;

&lt;h2 id=&quot;dont-tested&quot;&gt;don’t tested.&lt;/h2&gt;

&lt;p&gt;** 1 **&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2009
&lt;span class=&quot;nb&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a+=1&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; xx09
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; -i b     &lt;span class=&quot;c&quot;&gt;##declare b as a integer&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b+=1&quot;&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;## b equal 1, when b is declared a integer it becomes 0.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0


result:
&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2010
&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xx09
&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xx09
&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;** 2 **&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shell 有两种类型，字符，整型数字
字符默认是 空 “”
数字默认是 0

#!/bin/bash
c=&quot;&quot;
echo &quot;c=$c&quot;
let &quot;c+=1&quot;
echo &quot;c=$c&quot;
echo &quot;e=$e&quot;
let &quot;e+=1&quot;
echo &quot;e=$e&quot;
ecit

result:
c=
c=1
e=
e=1 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;** 3 **&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shell变量一般是无类型的，但是bash shell提供了declare和typeset两个命令来制定变量的类型，这两个命令完全等价。
declare [选项] 变量
-r 声明为只读变量
-i 声明为整形变量
-a 将变量声明为数组
-f 显示此脚本前定义的所有函数名及其内容
-F 仅显示此脚本前定义过的所有函数名
-x 将变量声明为环境变量

eg
#!/bin/bash
var1=2012
var2=$var1+1	#no declared£¬ so it&#39;s string.
echo &quot;var2=$var2&quot;

let &quot;var3=$var1+1&quot;	# let functioned.
echo &quot;var3=$var3&quot;

declare -i var4 #declare as a integer
var4=$var1+1
echo &quot;var4=$var4&quot;


output:
var2=2012+1
var3=2013
var4=2013


#!/bin/bash
## let equal to (())

var1=9
var2=10

var3=$((var1*var2)) # equal as (($var1*$var2))
echo $var3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;** 4 **&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;环境变量
ENVIRON-VARIABLE=value  #环境变量赋值
export ENVIRON-VARIABLE #声明环境变量
消除环境变量是unset

env可以列出已经定义的环境变量

pwd是当前的目录路径 
OLDPWD是旧的工作目录
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 07 Dec 2015 15:00:00 +0800</pubDate>
        <link>http://yourdomain.com/shell/2015/12/07/shell.html</link>
        <guid isPermaLink="true">http://yourdomain.com/shell/2015/12/07/shell.html</guid>
        
        
        <category>shell</category>
        
      </item>
    
      <item>
        <title>Somethign about Shell</title>
        <description>&lt;p&gt;[转载自：]&lt;a href=&quot;http://blog.csdn.net/anders_zhuo/article/details/8644207&quot;&gt;http://blog.csdn.net/anders_zhuo/article/details/8644207&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&quot;Enter your name:&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read
echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;read without anyvariables:REPLY=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$REPLY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&quot;Enter your age:&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;age
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;read with variable:Age=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; and REPLY=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$REPLY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;which one are you skilledin?&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;var &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;java&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c++&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;php&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c#&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;the &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;REPLY=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$REPLY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;you are skilled in &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;break
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;nv&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5	
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SECONDS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -le &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$MAX&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this is the &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; time to sleep!&quot;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;+1
	sleep 2
&lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this script runs &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SECONDS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; seconds!&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# strlen(str) ${#str} or exptr length $string&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# expr index $string $substring&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# expr index &quot;Speeding up small jobs in Hadoop&quot; jobs&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 0x13&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# get substring	&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#{string:position:length} &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#{...} # 从零开始标记字符串 from left to right&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#{string: -position} #冒号和横杆之间有空格 从右边开始取&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#{string:(position)} &lt;/span&gt;
expr substr &lt;span class=&quot;nv&quot;&gt;$string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$position&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$length&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#从名称为$string的字符串的第#position位置开始		取长度为$length的子串&lt;/span&gt;

delete sunstring
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;#substring&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#删除string开头处与substring匹配的最短子串&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;##substring&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#删除string子串与substring匹配的最长子串&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%substring&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#删除string结尾处与substring匹配的最短子串&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%%substring&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#删除string结尾处与substring匹配的最长子串&lt;/span&gt;


eg
定义一个字符串   20121114ReadingHadoop
ming@ming-F83VF:~/shellpractice/chapter9&lt;span class=&quot;nv&quot;&gt;$anotherstr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;20121114ReadingHadoop
ming@ming-F83VF:~/shellpractice/chapter9&lt;span class=&quot;nv&quot;&gt;$echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$anotherstr&lt;/span&gt;
20121114ReadingHadoop
删除开头处 以 2开始1结尾的  最短字符串！！
ming@ming-F83VF:~/shellpractice/chapter9&lt;span class=&quot;nv&quot;&gt;$echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;anotherstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;#2*1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
21114ReadingHadoop
删除开头处 以 2开始1结尾的  最长字符串！！
ming@ming-F83VF:~/shellpractice/chapter9&lt;span class=&quot;nv&quot;&gt;$echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;anotherstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;##2*1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
4ReadingHadoop
删除结尾处 以 a开始p结尾的  最短字符串！！
ming@ming-F83VF:~/shellpractice/chapter9&lt;span class=&quot;nv&quot;&gt;$echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;anotherstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%a*p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
20121114ReadingH
删除结尾处 以 a开始p结尾的  最长字符串！！
ming@ming-F83VF:~/shellpractice/chapter9&lt;span class=&quot;nv&quot;&gt;$echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;anotherstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%%a*p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
20121114Re

5 替换子串
替换子串命令都是&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;格式，可以在任意处、开头处和结尾处替换满足条件的子串
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/substring/replacement&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#仅替换第一次与substring相匹配的子串  &lt;/span&gt;
 	&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;//substring/replacement&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#替换所有与substring相匹配的子串  &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/#substring/replacement&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#替换string开头处与substring相匹配的子串  &lt;/span&gt;
 	&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/%substring/replacement&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#替换string结尾处与substring相匹配的子串  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;io&quot;&gt;IO重定向&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	I/O重定向是一个过程，这个过程捕捉一个文件、或命令、或程序、或脚本、甚至代码块（code block）的输出，然后把捕捉到的输出，作为输入发送给另外一个文件、或命令、或程序、或脚本
	
	文件标识符是从0开始到9结束的整数，指明了与进程相关的特定数据流的源
	
	Linux系统启动一个进程（该进程可能用于执行Shell命令）时，将自动为该进程打开三个文件：标准输入、标准输出和标准错误输出，分别由文件标识符0、1、2标识

	Shell命令从标准输入读取输入数据，将输出送到标准输出，如果该命令在执行过程中发生错误，则将错误信息输出到标准错误输出，默认情况下，标准输入与键盘输入相关联，标准输出和标准错误输出与显示器相关联
&quot;&quot; 标准输出： &quot;&quot;
例1
	cat和&amp;gt;符号结合成为简易文本编辑器
	cat命令后不加任何参数时，cat命令的输入是标准输入，即键盘输入
	利用I/O重定向符号“&amp;gt;”将键盘输入写入文件
	cat &amp;gt; newfile后，就可输入需要写到newfile的内容，最后按CTRL+D结束对newfile的编辑

例2
	&amp;gt;&amp;gt;符号用于在已有文件后追加一些文本
	eg
	ls &amp;gt;&amp;gt;newfile  只是追加并没有把原来的覆盖掉
	ls &amp;gt;newfile   将文件清空，然后将内容写进去

例3
	&amp;gt;|符号是强制覆盖文件的符号，它与Shell的noclobber选项有关系，如果noclobber选项开启，表		示不允许覆盖任何文件，而&amp;gt;|符号则可以不管noclobber选项的作用，强制将文件覆盖
	eg
	ming@ming-F83VF:~/shellpractice/chapter10$set -C  noclobber选项开启
	ming@ming-F83VF:~/shellpractice/chapter10$date &amp;gt;newfile
	bash: newfile: 无法覆盖已存在的文件

	ming@ming-F83VF:~/shellpractice/chapter10$date &amp;gt;|newfile
	ming@ming-F83VF:~/shellpractice/chapter10$cat newfile
	2012年 11月 10日 星期日 09:47:25 CST
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;标准错误输出：&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
重定向标准错误输出，需要使用文件标识符2
 	2&amp;gt; newfile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 	eg 
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ming@ming-F83VF:~/shellpractice/chapter10$ ls 22*&amp;gt;newfile 此时是将标准输出到	newfile中  但是屏幕中还是会输出，因为他是标准输出 
ls: 无法访问22*: 没有那个文件或目录
ming@ming-F83VF:~/shellpractice/chapter10$ls 22* 2&amp;gt;newfile 
此时是将标准错误输出到	newfile中所以屏幕中没有任何输出
ming@ming-F83VF:~/shellpractice/chapter10$cat newfile
ls: 无法访问22*: 没有那个文件或目录

2
&amp;lt; 是I/O重定向的输入符号，它可将文件内容写到标准输入之中
 
ming@ming-F83VF:~/shellpractice/chapter10$ wc -l &amp;lt;newfile
1
这个newfile作为标准输入到wc 所以wc得到的内容只是newfile的内容！！
所以他不会知道这是哪个文件！所以只是打印出了文件行数
 
ming@ming-F83VF:~/shellpractice/chapter10$wc -l newfile
1 newfile
这个newfile作为wc命令的 操作文件。此时wc知道他要计数的是哪个文件，所以能打印出newfile文件名，因此既打印出了行数也打印出了文件名
 
&amp;lt;&amp;lt;delimiter  这个比较重要！！！
符号称为此处文档（Here-document），delimiter称为分界符，该符号表明：Shell将分界符delimiter之后直至下一个delimiter之前的所有内容作为输入
 
ming@ming-F83VF:~/shellpractice/chapter10$cat &amp;gt;newfile &amp;lt;&amp;lt;CLOUD
&amp;gt; hello cloud
&amp;gt; hadoop
&amp;gt; nosql
&amp;gt; CLOUD
(剖析：cat&amp;gt;newfile 是将标准输入到newfile文件中，即键盘输入newfile&amp;lt;&amp;lt;CLOUD是将输入到CLOUD之前的内容作为标准输入在此之前是用ctrl+d 结束标准输入，而使用&amp;lt;&amp;lt;  则是吧CLOUD作为结束标准输入)
 
ming@ming-F83VF:~/shellpractice/chapter10$cat newfile
hello cloud
hadoop
nosql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 	1) 内建命令 
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	父子Shell是相对的，描述了两个Shell进程的fork关系，父Shell指在控制终端或xterm窗口给出提示符的进程，子Shell是由父Shell创建的进程
	Shell命令可分为内建命令（built-incommand）和外部命令（external command）内建命令是由Shell本身执行的命令
	外部命令由fork出来的子Shell执行
	内建命令不创建子Shell，外部命令创建子Shell，因此，内建命令的执行速度要比外部命令快

2) 冒号: 冒号表示永真 相当于 TRUE 关键字
	eg
	#!/bin/bash
	declare -i i=0
	while : ;
	do
		if [ $i -eq 10 ]; then
			break
		fi
		echo $((++i))
	done
	
	# 冒号可以被用来清空文件 
	# :&amp;gt;filename  

3) 圆括号可以将其中的命令运行在子shell中
	(
		command1
		command2
		...
	)
	
  # BASH_SUBSHELL 该变量记录了 shell 的层次·
  eg
	#!/bin/bash
	echo &quot;the level of father shell is $BASH_SUBSHELL&quot;
	outvar=outvar
	(
	 echo &quot;the level of sub shell is $BASH_SUBSHELL&quot;
	 innervar=innervar
	 echo &quot;outvar=$outvar&quot; #子shell继承了父shell的变量
	 echo &quot;innervar=$innervar&quot;
	)
	echo &quot;the level of father shell is $BASH_SUBSHELL&quot;
	if [ -z $innervar ]
	then
		echo &quot;the innervar is $innervar&quot;
	else
		echo &quot;the outvar is $outvar&quot;
	fi
result:
	the level of father shell is 0
	the level of sub shell is 1
	outvar=outvar
	innervar=innervar
	the level of father shell is 0
	the innervar is
	
由此可见：
	子shell继承父shell的变量，而父shell不会得到子shell的变量
	另外父shell也不能使用子shell定义的环境变量

4) Shell 的限制模式
   以前的Shell模式都是运行在正常模式下的，shell还有一种模式称为限制模式，简称rsh(Restricted Shell),处于限制模式下的shell运行一段代码或者片段，将会禁用一些命令或操作。
   shell的限制模式是Linux系统基于安全方面的考虑，目地是为了限制脚本用户的权限，尽可能的减小脚本所带来的危害。


   bash Shell的限制模式借鉴了Korn Shell的限制性命令和操作，限制的命令和操作包含如下几方面：
   用cd命令更改当前工作目录的命令
   更改重要环境变量的值，包括$PATH、$SHELL、$BASH_ENV、$ENV和$SHELLOPTS
   输出重定向符号，包括&amp;gt;、&amp;gt;&amp;gt;、&amp;gt;|、&amp;gt;&amp;amp;、&amp;lt;&amp;gt;和&amp;amp;&amp;gt;符号
   调用含有一个或多个斜杠（/）的命令名称
   使用内建命令exec
   使用set +r等命令关闭限制模式
   使脚本运行在限制性模式下的两种方式：
   第一种：set -r命令开启restricted选项
   第二种：  #!后的语句改成/bin/bash -r

5) 进程号和作业号 
   进程号和作业号
   Linux系统为每个进程分配一个数字以标识这个进程，这个数字就是进程号
   创建该进程的Shell为此进程创建一个数字，也用于标识这个进程，这个数字称为作业号
   作业号标识的是在此Shell下运行的所有进程，我们知道，Linux是多用户的系统，多用户可能开启了多个Shell，进程号就标识了整个系统下正在运行的所有进程
   举例说明：
   [root@jselab shell-book]# grep -r&quot;root&quot; /etc/* | sort &amp;gt; part1 &amp;amp;
 	   [1] 4693
   [root@jselab shell-book]# grep -r&quot;root&quot; /usr/local/* | sort &amp;gt; part2 &amp;amp;
   [2] 4695		  

   作业有两种运行方式：前台运行和后台运行
   前台运行的作业指作业能够控制当前终端或窗口，且能接收用户的输入
   后台运行的作业则不在当前激活的终端或窗口中运行，是在用户“看不见”的情况下运行
   内建命令fg可将后台运行的作业放到前台，
   而&amp;amp;符号使得作业后台运行，
 
   CTRL+Z组合键可以使作业转入阻塞态，
   bg命令可使阻塞态作业转入后台运行
   fg、bg和jobs命令只能以作业号为参数来指定作业，这三个命令是不能使用进程号的
   disown命令用于从Shell的作业表中删除作业，作业表指得就是由jobs命令所列出的作业列表
   wait命令用于等待后台作业完成，

6) 信号

   信号是Linux进程间通信的一个重要而复杂的概念，信号是在软件层次上对中断机制的一种模拟
   信号是异步的，一个进程不必通过任何操作来等待信号的到达，事实上，进程也不知道信号到底什么时候到达
   信号来源：硬件来源和软件来源
   组合键
   信号类型
   意义
       CTRL+C 	INT信号，即interrupt信号 	停止当前运行的作业
   CTRL+Z	TSTP信号，即terminal stop信号	使当前运行的作业暂时停止（转入阻塞态）
   CTRL+\	QUIT信号			CTRL+C的强化版本，当CTRL+C无法停止作业时，使用此组合键
   CTRL+Y	TSTP信号，即terminal stop信号	当进程从终端读取输入数据时，暂时停止该进程
   对于shell能执行  停止 暂停等功能，是因为向shell发送了了信号。
   如表中信号：INT TSTP等
 
   CTRL+C，INT信号，退出作业
   CTRL+\, QUIT信号， CTRL+C的强化版本
   CTRL+Y组合键实际上与CTRL+Z组合键是类似的，都是向进程发送TSTP信号，表示将进程暂时停止
   kill命令可以通过进程号、作业号或进程命令名向任何作业发送信号
   kill –l列出kill命令能发出的所有信号


7) trap命令
  trap是Linux的内建命令，它用于捕捉信号
  指定收到某种信号时所执行的命令
  trap command sig1 sig2 …sigN
   trap命令表示当收到sig1、sig2、…、sigN中任意一个信号时，执行command命令，command命令完成后脚本继续收到信号前的操作，直到脚本执行结束
  eg
    [plain] view plaincopy
    #!/bin/bash  
    trap &quot;echo &#39;execute trap !&#39;&quot; INT  #接收 INT信号 即ctrl + c  
    count=1  
    while : ;  
    do  
    	echo &quot;this is $count&quot;  
 		let &quot;count+=1&quot;  
 		sleep 5  
    done  
   运行结果：每当　按下ctrl+c的时候都会被trap接收到，然后执行引号中的命令
   anders@anders-virtual-machine:~/code/shell/subandthread$./trap1.sh
   this is 1
   this is 2
   ^Cexecute trap !
   this is 3
   ^Cexecute trap !
   this is 4
   ^Cexecute trap !
   trap命令还可以
   忽略某些信号，即进程收到某些信号后不做任何处理，我们只要简单将trap命令的command用空字符串代替即可（&quot;&quot;或&#39;&#39;）
	#!/bin/bash 
	trap &quot;&quot; TERM SIGKILL INT 
	while :; do
		#let count=count+1
 			#echo &quot;This is the $count sleep&quot;
 			sleep 5
	done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sat, 05 Dec 2015 00:12:34 +0800</pubDate>
        <link>http://yourdomain.com/shell/2015/12/05/shell.html</link>
        <guid isPermaLink="true">http://yourdomain.com/shell/2015/12/05/shell.html</guid>
        
        
        <category>shell</category>
        
      </item>
    
  </channel>
</rss>
